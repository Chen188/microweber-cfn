AWSTemplateFormatVersion: 2010-09-09
Description: Creates Microweber environment - Personal version

Parameters:
    SSHKeyName:
        Description: 'Name of the EC2 key you need one to use this template'
        Type: 'AWS::EC2::KeyPair::KeyName'
        Default: 'choose-key'
    DBUsername:
        Description: Database Admin Username
        Type: String
        Default: admin
        AllowedPattern: ".+"
        ConstraintDescription: enter your DB username
    DBPassword:
        Description: MySQL Database password(at least 8 characters)
        Type: String
        ConstraintDescription: enter your password
        MinLength: 8
        NoEcho: 'true'
    MicroweberUsername:
        Description: Microweber Administrator Username, you will use this to edit your website
        Type: String
        Default: admin
        ConstraintDescription: enter your username
    MicroweberPassword:
        Description: Microweber Administrator Password, you will use this to edit your website
        Type: String
        AllowedPattern: ".+"
        ConstraintDescription: enter your password
        NoEcho: 'true'

Mappings:
  AMZLinux2IdMap:
    ap-northeast-1:
      Linux2: ami-02892a4ea9bfa2192
    ap-northeast-2:
      Linux2: ami-08c64544f5cfcddd0
    ap-northeast-3:
      Linux2: ami-09ec82600a05bc23a
    ap-south-1:
      Linux2: ami-0a23ccb2cdd9286bb
    ap-southeast-1:
      Linux2: ami-082105f875acab993
    ap-southeast-2:
      Linux2: ami-0210560cedcb09f07
    ca-central-1:
      Linux2: ami-0e2407e55b9816758
    eu-central-1:
      Linux2: ami-07df274a488ca9195
    eu-north-1:
      Linux2: ami-0f0b4cb72cf3eadf3
    eu-west-1:
      Linux2: ami-0d1bf5b68307103c2
    eu-west-2:
      Linux2: ami-0dbec48abfe298cab
    eu-west-3:
      Linux2: ami-072056ff9d3689e7b
    sa-east-1:
      Linux2: ami-09b9b17384f68fd7c
    us-east-1:
      Linux2: ami-087c17d1fe0178315
    us-east-2:
      Linux2: ami-00dfe2c7ce89a450b
    us-west-1:
      Linux2: ami-011996ff98de391d1
    us-west-2:
      Linux2: ami-0c2d06d50ce30b442
    cn-north-1:
      Linux2: ami-01b887d5e264569f5
    cn-northwest-1:
      Linux2: ami-028584814b5504f5b

  NetworkToSubnet:
    "10.0.0.0":
        PubSubnetZoneA: "10.0.10.0/24"
        PrivSubnetZoneA: "10.0.20.0/24"
        PubSubnetZoneB: "10.0.30.0/24"
        PrivSubnetZoneB: "10.0.40.0/24"

Resources:

    ################## Network Section ##################
    # VPC
    VPC:
        Type: 'AWS::EC2::VPC'
        Properties:
            CidrBlock:
                'Fn::Join': [ '/', [ '10.0.0.0', '16' ] ]
            EnableDnsSupport: true
            EnableDnsHostnames: true
            InstanceTenancy: 'default'
            Tags:
                - Key: 'Name'
                  Value:
                      Ref: 'AWS::StackName'

    # Internet accessable subnet in the first availability zone
    PubSubnetZoneA:
        Type: 'AWS::EC2::Subnet'
        Properties:
            AvailabilityZone:
                Fn::Select:
                - '0'
                - Fn::GetAZs:
                    Ref: 'AWS::Region'
            CidrBlock:
                Fn::FindInMap:
                - NetworkToSubnet
                - '10.0.0.0'
                - PubSubnetZoneA
            MapPublicIpOnLaunch: 'True'
            VpcId:
                Ref: 'VPC'
            Tags:
                - Key: 'Name'
                  Value:
                      'Fn::Join': [ ':', [ 'Public', 'Zone A', !Ref 'AWS::StackName' ] ]

    # Non-internet accessable subnet in the first availability zone
    PrivSubnetZoneA:
        Type: 'AWS::EC2::Subnet'
        Properties:
            AvailabilityZone:
                Fn::Select:
                - '0'
                - Fn::GetAZs:
                    Ref: 'AWS::Region'
            CidrBlock:
                Fn::FindInMap:
                - NetworkToSubnet
                - '10.0.0.0'
                - PrivSubnetZoneA
            MapPublicIpOnLaunch: 'False'
            VpcId:
                Ref: 'VPC'
            Tags:
                - Key: 'Name'
                  Value:
                      'Fn::Join': [ ':', [ 'Private', 'Zone A', !Ref 'AWS::StackName' ] ]

    # Internet accessable subnet in the second availability zone
    PubSubnetZoneB:
        Type: 'AWS::EC2::Subnet'
        Properties:
            AvailabilityZone:
                Fn::Select:
                - '1'
                - Fn::GetAZs:
                    Ref: 'AWS::Region'
            CidrBlock:
                Fn::FindInMap:
                - NetworkToSubnet
                - '10.0.0.0'
                - PubSubnetZoneB
            MapPublicIpOnLaunch: 'True'
            VpcId:
                Ref: 'VPC'
            Tags:
                - Key: 'Name'
                  Value:
                      'Fn::Join': [ ':', [ 'Public', 'Zone B', !Ref 'AWS::StackName' ] ]

    # Non-internet accessable subnet in the second availability zone
    PrivSubnetZoneB:
        Type: 'AWS::EC2::Subnet'
        Properties:
            AvailabilityZone:
                Fn::Select:
                - '1'
                - Fn::GetAZs:
                    Ref: 'AWS::Region'
            CidrBlock:
                Fn::FindInMap:
                - NetworkToSubnet
                - '10.0.0.0'
                - PrivSubnetZoneB
            MapPublicIpOnLaunch: 'False'
            VpcId:
                Ref: 'VPC'
            Tags:
                - Key: 'Name'
                  Value:
                      'Fn::Join': [ ':', [ 'Private', 'Zone B', !Ref 'AWS::StackName' ] ]

    # Gateway to the internet
    InternetGateway:
        Type: 'AWS::EC2::InternetGateway'
        Properties:
            Tags:
                - Key: 'Name'
                  Value:
                      Ref: 'AWS::StackName'

    # Associate the gateway to the VPC
    GatewayAttachment:
        Type: AWS::EC2::VPCGatewayAttachment
        Properties:
            InternetGatewayId:
                Ref: 'InternetGateway'
            VpcId:
                Ref: 'VPC'

    # Routing table for the public subnet in availability zone A
    RouteTablePubZoneA:
        Type: AWS::EC2::RouteTable
        Properties:
            VpcId:
                Ref: 'VPC'
            Tags:
                - Key: 'Name'
                  Value:
                      'Fn::Join': [ ':', [ 'Public', 'Zone A', !Ref 'AWS::StackName' ] ]

    # Routing table for the public subnet in availability zone B
    RouteTablePubZoneB:
        Type: AWS::EC2::RouteTable
        Properties:
            VpcId:
                Ref: 'VPC'
            Tags:
                - Key: 'Name'
                  Value:
                      'Fn::Join': [ ':', [ 'Public', 'Zone B', !Ref 'AWS::StackName' ] ]

    # Route traffic through the internet gateway
    RoutePubZoneA:
        DependsOn:
            - InternetGateway
        Type: AWS::EC2::Route
        Properties:
            DestinationCidrBlock: '0.0.0.0/0'
            GatewayId:
                Ref: 'InternetGateway'
            RouteTableId:
                Ref: 'RouteTablePubZoneA'

    # Route traffic through the internet gateway
    RoutePubZoneB:
        DependsOn:
            - InternetGateway
        Type: AWS::EC2::Route
        Properties:
            DestinationCidrBlock: 0.0.0.0/0
            GatewayId:
                Ref: 'InternetGateway'
            RouteTableId:
                Ref: 'RouteTablePubZoneB'

    # Associate public subnet to its routing table
    RouteAssociationPubSubnetZoneA:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
            SubnetId:
                Ref: 'PubSubnetZoneA'
            RouteTableId:
                Ref: 'RouteTablePubZoneA'

    # Associate public subnet to its routing table
    RouteAssociationPubSubnetZoneB:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
            SubnetId:
                Ref: 'PubSubnetZoneB'
            RouteTableId:
                Ref: 'RouteTablePubZoneB'

    # Routing table for the private subnet in availability zone A
    RouteTablePrivZoneA:
        Type: AWS::EC2::RouteTable
        Properties:
            VpcId:
                Ref: 'VPC'
            Tags:
                - Key: 'Name'
                  Value:
                      'Fn::Join': [ ':', [ 'Private', 'Zone A', !Ref 'AWS::StackName' ] ]

    # Routing table for the private subnet in availability zone B
    RouteTablePrivZoneB:
        Type: AWS::EC2::RouteTable
        Properties:
            VpcId:
                Ref: 'VPC'
            Tags:
                - Key: 'Name'
                  Value:
                      'Fn::Join': [ ':', [ 'Private', 'Zone B', !Ref 'AWS::StackName' ] ]

    # Associate the private subnet with its routing table
    RouteAssociationPrivSubnetZoneA:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
            SubnetId:
                Ref: 'PrivSubnetZoneA'
            RouteTableId:
                Ref: 'RouteTablePrivZoneA'

    # Associate the private subnet with its routing table
    RouteAssociationPrivSubnetZoneB:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
            SubnetId:
                Ref: 'PrivSubnetZoneB'
            RouteTableId:
                Ref: 'RouteTablePrivZoneB'


    ################## EC2 And ALB Section ##################

    # EC2 Security Group Allowing Port 22 and 80 from anywhere
    EC2SecurityGroup:
        Type: AWS::EC2::SecurityGroup
        Properties:
            GroupDescription: 'SSH and Port 80'
            VpcId:
              Ref: VPC
            SecurityGroupIngress:
                - IpProtocol: tcp
                  FromPort: 22
                  ToPort: 22
                  CidrIp: 0.0.0.0/0
                - IpProtocol: tcp
                  FromPort: 80
                  ToPort: 80
                  CidrIp: 0.0.0.0/0

    # Linux Instance with Apache running on Port 80
    AmazonLinuxInstance:
      Type: AWS::EC2::Instance
      Properties:
        SubnetId:
          !Ref PubSubnetZoneA
        SecurityGroupIds:
          - !Ref EC2SecurityGroup
        ImageId: !FindInMap
          - AMZLinux2IdMap
          - !Ref 'AWS::Region'
          - Linux2
        InstanceType: t3.micro
        KeyName: !Ref SSHKeyName
        BlockDeviceMappings:
          - DeviceName: /dev/xvda
            Ebs:
              VolumeType: gp3
              VolumeSize: '30'
              DeleteOnTermination: 'false'
              Encrypted: 'true'
        UserData:
          Fn::Base64: 
            !Sub |
              #!/bin/bash
              VERSION=microweber-1.2.9-path-csrf-path
              MW_INSTALL_DIR=/var/www/
              MW_PKG_URL=https://mw-binc-cn.s3.cn-northwest-1.amazonaws.com.cn/assets/$VERSION.zip
              
              yum update -y
              amazon-linux-extras install php7.4 nginx1 -y
              amazon-linux-extras enable php7.4
              yum clean metadata
              systemctl enable nginx
              yum install git php-mbstring php-dom php-gd php-fpm -y
              systemctl enable php-fpm

              mkdir -p $MW_INSTALL_DIR
              chown apache:apache $MW_INSTALL_DIR
              cd $MW_INSTALL_DIR
              
              sudo -u apache -- sh -c \
                "wget $MW_PKG_URL && unzip $VERSION.zip && \
                ln -s $MW_INSTALL_DIR/$VERSION $MW_INSTALL_DIR/microweber"
              
              cd $MW_INSTALL_DIR/microweber
              mkdir .composer && export COMPOSER_HOME=$MW_INSTALL_DIR/microweber/.composer
              curl -sS https://getcomposer.org/installer | php
              mv composer.phar /usr/bin/composer

              sudo -u apache -- sh -c \
                "composer install && \
                composer update && \
                php artisan microweber:install admin@site.com ${MicroweberUsername} ${MicroweberPassword} storage/database.sqlite MicroweberDB ${DBUsername} ${DBPassword} -t new-world -d 1"

              cd /etc/nginx/
              sed -i 's+/usr/share/nginx/html+/var/www/microweber+g' nginx.conf
              cd default.d
              printf "location / {\n\ttry_files "$'\x24'"uri "$'\x24'"uri/ /index.php"$'\x24'"is_args"$'\x24'"args;\n}" > web.conf
              systemctl restart nginx
              systemctl restart php-fpm

    ################## CDN Section ##################

    CloudFront:
      Type: 'AWS::CloudFront::Distribution'
      Properties:
        DistributionConfig:
          Origins:
            - DomainName: !GetAtt AmazonLinuxInstance.PublicDnsName
              Id: !Ref AmazonLinuxInstance
              CustomOriginConfig:
                HTTPPort: '80'
                OriginProtocolPolicy: http-only
          Enabled: true
          DefaultCacheBehavior:
            AllowedMethods:
              - GET
              - HEAD
              - DELETE
              - OPTIONS
              - PATCH
              - POST
              - PUT
            TargetOriginId: !Ref AmazonLinuxInstance
            ViewerProtocolPolicy: allow-all
            ForwardedValues:
              QueryString: 'true'
              Cookies:
                Forward: all
              Headers:
                - Origin
                - Referer
                - User-Agent
                - Host
                - CloudFront-Forwarded-Proto
          CacheBehaviors:
            - PathPattern: '/userfiles/*'
              AllowedMethods:
              - GET
              - HEAD
              - OPTIONS
              TargetOriginId: !Ref AmazonLinuxInstance
              ViewerProtocolPolicy: allow-all
              ForwardedValues:
                QueryString: 'true'
                Cookies:
                  Forward: none
                Headers:
                  - Origin
                  - Referer
                  - User-Agent
                  - Host
                  - CloudFront-Forwarded-Proto
              MinTTL: '86400'
          PriceClass: PriceClass_All
          ViewerCertificate:
            CloudFrontDefaultCertificate: true

Outputs:
    VPC:
      Description: 'Virtual Private Cloud'
      Value:
        Ref: 'VPC'
    MicroweberLogin:
      Description: 'Microweber Login URL'
      Value:
        'Fn::Join': [ '/', [ !GetAtt CloudFront.DomainName, 'login' ] ]
    MicroweberAdminUser:
      Description: 'Microweber Admin Username'
      Value: !Ref MicroweberUsername